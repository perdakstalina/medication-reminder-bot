import asyncio
import os
import requests
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from pytz import timezone
import aioschedule as schedule
import sqlite3
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import Bot
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
PORT = int(os.getenv("PORT", 8080))  # –ü–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π Render –æ–∂–∏–¥–∞–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8080)

# –£–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –ú–æ—Å–∫–≤—ã
moscow_tz = timezone("Europe/Moscow")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = os.getenv("DB_PATH", "medication_reminders.db")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
response = requests.post(f"https://api.telegram.org/bot{API_TOKEN}/deleteWebhook")
if response.status_code == 200:
    print("Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
else:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:", response.text)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
default_properties = DefaultBotProperties(parse_mode="HTML")
bot = Bot(token=API_TOKEN, session=AiohttpSession(), default=default_properties)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
cursor.execute("""
CREATE TABLE IF NOT EXISTS reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    medication_name TEXT NOT NULL,
    reminder_time TEXT NOT NULL,
    sent INTEGER DEFAULT 0
)
""")
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReminderState(StatesGroup):
    medication_name = State()
    reminder_time = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç", callback_data="add_reminder")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list_reminders")]
    ])

def back_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def reminder_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user_name}</b>!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤–æ–≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data == "main_menu")
async def go_back_to_main_menu(call: types.CallbackQuery):
    await call.message.edit_text(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data == "add_reminder")
async def add_reminder(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å:",
        reply_markup=back_button()
    )
    await state.set_state(ReminderState.medication_name)

@dp.message(ReminderState.medication_name)
async def set_medication_name(message: types.Message, state: FSMContext):
    await state.update_data(medication_name=message.text)
    await message.answer(
        "‚è∞ <b>–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?</b>\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
        reply_markup=back_button()
    )
    await state.set_state(ReminderState.reminder_time)

@dp.message(ReminderState.reminder_time)
async def set_reminder_time(message: types.Message, state: FSMContext):
    try:
        reminder_time = datetime.strptime(message.text, "%H:%M").time()
        user_data = await state.get_data()
        
        cursor.execute(
            "INSERT INTO reminders (user_id, medication_name, reminder_time) VALUES (?, ?, ?)",
            (message.from_user.id, user_data['medication_name'], message.text)
        )
        conn.commit()

        await message.answer(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ <b>{user_data['medication_name']}</b> "
            f"–Ω–∞ <b>{message.text}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=main_menu()
        )
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
            reply_markup=back_button()
        )

@dp.callback_query(F.data == "list_reminders")
async def list_reminders(call: types.CallbackQuery):
    cursor.execute("SELECT id, medication_name, reminder_time FROM reminders WHERE user_id = ?", (call.from_user.id,))
    reminders = cursor.fetchall()

    if reminders:
        response = "üìã <b>–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for reminder in reminders:
            response += f"üíä <b>{reminder[1]}</b> –≤ <b>{reminder[2]}</b> (ID: {reminder[0]})\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {reminder[1]} ({reminder[2]})",
                    callback_data=f"delete_{reminder[0]}"
                )
            ])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
        await call.message.edit_text(response, reply_markup=keyboard)
    else:
        await call.message.edit_text(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.</b>",
            reply_markup=main_menu()
        )

@dp.callback_query(lambda call: call.data.startswith("delete_"))
async def delete_reminder(call: types.CallbackQuery):
    reminder_id = int(call.data.split("_")[1])
    cursor.execute("DELETE FROM reminders WHERE id = ? AND user_id = ?", (reminder_id, call.from_user.id))
    conn.commit()
    await call.message.edit_text(
        "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!",
        reply_markup=main_menu()
    ) 

async def send_reminders():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–°–ö
    now = datetime.now(moscow_tz).strftime("%H:%M")
    print(f"Checking reminders at {now}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

    cursor.execute("SELECT id, user_id, medication_name FROM reminders WHERE reminder_time = ? AND sent = 0", (now,))
    reminders = cursor.fetchall()

    for reminder in reminders:
        user_id = reminder[1]
        medication_name = reminder[2]
        await bot.send_message(
            user_id,
            f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n–ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å <b>{medication_name}</b>!",
            reply_markup=reminder_menu()
        )
        cursor.execute("UPDATE reminders SET sent = 1 WHERE id = ?", (reminder[0],))
    conn.commit()

async def scheduler():
    while True:
        jobs = schedule.jobs
        for job in jobs:
            if asyncio.iscoroutinefunction(job.job_func):
                asyncio.create_task(job.job_func())
            else:
                job.job_func()
        await asyncio.sleep(1)

async def start_server():
    from aiohttp import web
    async def handle(request):
        return web.Response(text="Bot is running!")
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()

async def main():
    asyncio.create_task(start_server())  # –ó–∞–ø—É—Å–∫ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render
    schedule.every().minute.do(send_reminders)
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
